name = "metrics"

[[services]]
  name = "prometheus"
  image = "docker.io/prom/prometheus:latest"
  replicas = 1
  [services.process]
    args = [
      "/bin/prometheus",
      "--config.file=/etc/prometheus/prometheus.yml",
      "--web.enable-remote-write-receiver",
    ]
  [services.network]
    type = "stellar"
  [[services.configs]]
    name = "prometheus"
    path = "/etc/prometheus/prometheus.yml"
    content = '''# managed by stellar
global:
  scrape_interval:     15s
scrape_configs:
  - job_name: 'prometheus'
    static_configs:
      - targets: ['127.0.0.1:9090']
'''

[[services]]
  name = "agent"
  image = "docker.io/prom/prometheus:latest"
  [services.process]
    args = [
      "/bin/prometheus",
      "--enable-feature=agent",
      "--config.file=/etc/prometheus/prometheus.yml",
    ]
  [services.placementPreference]
    strategy = "global"
  [services.network]
    type = "stellar"
  [[services.configs]]
    name = "prometheus"
    path = "/etc/prometheus/prometheus.yml"
    content = '''# managed by stellar
global:
  scrape_interval: 15s
  external_labels:
    agent: {{ .Agent.Name }}

scrape_configs:
  - job_name: "containerd"
    metrics_path: /v1/metrics
    static_configs:
      - targets: ["{{ .Agent.AgentIP }}:10000"]

remote_write:
- url: 'http://prometheus:9090/api/v1/write'
'''

[[services]]
  name = "grafana"
  image = "docker.io/grafana/grafana:latest"
  replicas = 1
  [services.network]
    type = "stellar"
  [[services.endpoints]]
    [services.endpoints.config]
      [services.endpoints.config.http]
        host = "{{ if ne (index .Params \"name\") \"\" }}{{ index .Params \"name\" }}{{ else }}metrics{{ end }}.{{.Cluster.Config.ClusterDomain}}"
        port = 3000
